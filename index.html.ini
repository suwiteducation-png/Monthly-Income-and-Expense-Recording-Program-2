<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>My Income/Expense Tracker • Supabase</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Noto+Sans+Thai:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <!-- Supabase JS v2 and Chart.js v4 -->
  <script defer src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.45.4/dist/umd/supabase.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <style>
    :root{
      --bg:#f8fbff;           /* ขาวอมฟ้า */
      --card:#ffffff;         /* ขาว */
      --text:#0f172a;         /* slate-900 */
      --muted:#475569;        /* slate-600 */
      --primary:#2563eb;      /* น้ำเงิน */
      --primary-600:#1d4ed8;  /* น้ำเงินเข้ม */
      --primary-50:#eff6ff;   /* ฟ้าอ่อน */
      --ring:#93c5fd;         /* เส้นเน้น */
      --good:#16a34a;         /* เขียว */
      --bad:#dc2626;          /* แดง */
      --warning:#f59e0b;      /* เหลือง */
      --shadow:0 10px 30px rgba(37,99,235,.08);
      --radius:18px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family:"Inter","Noto Sans Thai",system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif; 
      background:linear-gradient(180deg,var(--bg),#fff);
      color:var(--text);
    }
    a{color:var(--primary);text-decoration:none}
    .container{max-width:1100px;margin:0 auto;padding:24px}
    header.appbar{position:sticky;top:0;z-index:30;background:rgba(255,255,255,.8);backdrop-filter:saturate(140%) blur(10px);border-bottom:1px solid #e9eefb}
    .brand{display:flex;align-items:center;gap:12px;padding:14px 0}
    .logo{width:36px;height:36px;border-radius:50%;background:radial-gradient(circle at 30% 30%, #60a5fa, #2563eb);box-shadow:var(--shadow)}
    .brand h1{font-size:18px;margin:0;font-weight:700}
    nav.tabs{display:flex;gap:10px;flex-wrap:wrap}
    .tab{padding:10px 14px;border-radius:999px;background:var(--primary-50);color:var(--primary);font-weight:600;border:1px solid #dbeafe;cursor:pointer}
    .tab[aria-selected="true"]{background:var(--primary);color:#fff;border-color:var(--primary)}
    .row{display:grid;grid-template-columns:1fr;gap:18px}
    @media(min-width:900px){.row{grid-template-columns:1.2fr .8fr}}
    .card{background:var(--card);border:1px solid #eef2ff;border-radius:var(--radius);box-shadow:var(--shadow);padding:18px}
    .card h2{margin:0 0 12px 0;font-size:18px}
    .grid{display:grid;gap:12px}
    .grid.cols-2{grid-template-columns:1fr 1fr}
    .grid.cols-3{grid-template-columns:repeat(3,1fr)}
    @media(max-width:760px){.grid.cols-2,.grid.cols-3{grid-template-columns:1fr}}
    label{font-size:13px;color:var(--muted);margin-bottom:6px;display:block}
    input,select,button,textarea{font-family:inherit;font-size:14px}
    input,select,textarea{
      width:100%;padding:10px 12px;border-radius:12px;border:1px solid #e2e8f0;background:#fff;outline:none;
    }
    input:focus,select:focus,textarea:focus{border-color:var(--ring);box-shadow:0 0 0 4px rgba(59,130,246,.15)}
    .btn{display:inline-flex;align-items:center;gap:8px;padding:10px 14px;border-radius:12px;border:1px solid transparent;cursor:pointer;font-weight:600}
    .btn.primary{background:var(--primary);color:#fff}
    .btn.primary:hover{background:var(--primary-600)}
    .btn.ghost{background:#fff;border-color:#e2e8f0}
    .btn.warn{background:var(--bad);color:#fff}
    .toolbar{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
    .muted{color:var(--muted)}
    table{width:100%;border-collapse:separate;border-spacing:0 8px}
    th,td{font-size:14px;padding:10px 12px;text-align:left}
    thead th{color:#334155}
    tbody tr{background:#fff;border:1px solid #e2e8f0}
    tbody tr td:first-child{border-top-left-radius:12px;border-bottom-left-radius:12px}
    tbody tr td:last-child{border-top-right-radius:12px;border-bottom-right-radius:12px}
    .chip{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border-radius:999px;background:#eff6ff;color:#1e3a8a;border:1px solid #dbeafe;font-weight:600;font-size:12px}
    .amount.pos{color:var(--good);font-weight:700}
    .amount.neg{color:var(--bad);font-weight:700}
    .footer-note{font-size:12px;color:var(--muted)}
    .hidden{display:none}
    .center{display:flex;align-items:center;justify-content:center}
    .toast{position:fixed;right:20px;bottom:20px;z-index:50;display:flex;gap:10px;align-items:center;background:#0f172a;color:#fff;padding:12px 14px;border-radius:12px;box-shadow:var(--shadow);opacity:0;transform:translateY(10px);transition:.25s}
    .toast.show{opacity:1;transform:translateY(0)}
    /* Auth */
    .auth-wrap{min-height:70vh;display:grid;place-items:center}
    .auth-card{max-width:520px}
    .divider{height:1px;background:#e2e8f0;margin:8px 0 16px}
    .kicker{font-size:12px;color:#3b82f6;font-weight:700;letter-spacing:.08em;text-transform:uppercase}
    .title{font-size:24px;font-weight:800;margin:4px 0 12px}
    .sub{color:var(--muted)}
  </style>
</head>
<body>
  <header class="appbar">
    <div class="container" style="display:flex;align-items:center;justify-content:space-between;gap:16px;flex-wrap:wrap">
      <div class="brand"><div class="logo"></div><h1>รายรับ-รายจ่าย • Supabase</h1></div>
      <nav class="tabs" id="navTabs" aria-label="Sections" hidden>
        <button class="tab" data-tab="dashboard" aria-selected="true">แดชบอร์ด</button>
        <button class="tab" data-tab="add">บันทึก</button>
        <button class="tab" data-tab="config">ตั้งค่ากลุ่ม</button>
        <button class="tab" data-tab="reports">รายงาน & ภาษี</button>
        <button class="tab" id="signOutBtn" style="margin-left:auto">ออกจากระบบ</button>
      </nav>
    </div>
  </header>

  <!-- AUTH -->
  <section class="auth-wrap" id="authView">
    <div class="container">
      <div class="card auth-card">
        <div class="kicker">เริ่มต้นใช้งาน</div>
        <div class="title">ลงทะเบียน / เข้าสู่ระบบ</div>
        <p class="sub">ระบบนี้ใช้ <strong>Supabase Auth</strong> (อีเมล + รหัสผ่าน). หลังเข้าสู่ระบบ ข้อมูลทั้งหมดจะถูกเก็บในฐานข้อมูลของคุณเอง</p>
        <div class="divider"></div>
        <div class="grid cols-2">
          <div>
            <h2>ลงทะเบียน</h2>
            <label>อีเมล</label>
            <input id="signupEmail" type="email" placeholder="you@example.com" />
            <label style="margin-top:8px">รหัสผ่าน</label>
            <input id="signupPassword" type="password" placeholder="อย่างน้อย 6 ตัวอักษร" />
            <button class="btn primary" style="margin-top:12px" id="signupBtn">สร้างบัญชี</button>
          </div>
          <div>
            <h2>เข้าสู่ระบบ</h2>
            <label>อีเมล</label>
            <input id="signinEmail" type="email" placeholder="you@example.com" />
            <label style="margin-top:8px">รหัสผ่าน</label>
            <input id="signinPassword" type="password" />
            <button class="btn ghost" style="margin-top:12px" id="signinBtn">เข้าสู่ระบบ</button>
          </div>
        </div>
        <p class="footer-note" style="margin-top:12px">คำแนะนำ: ใช้ <a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noreferrer">Live Server</a> ใน VS Code เพื่อรันไฟล์นี้</p>
      </div>
    </div>
  </section>

  <!-- APP VIEWS -->
  <main class="container hidden" id="appView">
    <!-- DASHBOARD -->
    <section id="view-dashboard" class="view">
      <div class="row">
        <div class="card">
          <h2>ภาพรวมประจำเดือน</h2>
          <div class="toolbar" style="margin-bottom:12px">
            <label for="monthPicker" class="muted">เลือกเดือน</label>
            <input type="month" id="monthPicker" />
            <span class="muted">สกุลเงิน: THB</span>
          </div>
          <div class="grid cols-2">
            <div>
              <canvas id="pieIncome" height="220"></canvas>
            </div>
            <div>
              <canvas id="pieExpense" height="220"></canvas>
            </div>
          </div>
          <div class="grid cols-3" style="margin-top:12px">
            <div class="card" style="padding:12px">
              <div class="muted">รายรับรวม</div>
              <div id="sumIncome" style="font-size:22px;font-weight:800;color:var(--good)">—</div>
            </div>
            <div class="card" style="padding:12px">
              <div class="muted">รายจ่ายรวม</div>
              <div id="sumExpense" style="font-size:22px;font-weight:800;color:var(--bad)">—</div>
            </div>
            <div class="card" style="padding:12px">
              <div class="muted">คงเหลือ</div>
              <div id="sumNet" style="font-size:22px;font-weight:800">—</div>
            </div>
          </div>
        </div>
        <div class="card">
          <h2>บันทึกล่าสุด</h2>
          <div class="toolbar">
            <button class="btn primary" onclick="switchTab('add')">+ เพิ่มรายการ</button>
          </div>
          <div style="max-height:420px;overflow:auto">
            <table>
              <thead>
                <tr>
                  <th>วันที่</th>
                  <th>ประเภท</th>
                  <th>กลุ่ม</th>
                  <th>จำนวนเงิน</th>
                  <th>หมายเหตุ</th>
                  <th></th>
                </tr>
              </thead>
              <tbody id="recentTbody"></tbody>
            </table>
          </div>
        </div>
      </div>
    </section>

    <!-- ADD ENTRY -->
    <section id="view-add" class="view hidden">
      <div class="card">
        <h2>เพิ่ม/แก้ไข รายการ</h2>
        <div class="grid cols-3">
          <div>
            <label>วันที่</label>
            <input type="date" id="txDate" />
          </div>
          <div>
            <label>ประเภท</label>
            <select id="txType">
              <option value="income">รายรับ</option>
              <option value="expense">รายจ่าย</option>
            </select>
          </div>
          <div>
            <label>กลุ่ม</label>
            <select id="txCategory"></select>
          </div>
          <div>
            <label>จำนวนเงิน (THB)</label>
            <input type="number" id="txAmount" step="0.01" placeholder="0.00" />
          </div>
          <div class="grid" style="grid-template-columns:1fr auto;gap:10px">
            <div>
              <label>หมายเหตุ</label>
              <input id="txNote" placeholder="เช่น ข้าวเที่ยง, โบนัส" />
            </div>
            <div style="align-self:end">
              <button class="btn ghost" id="resetFormBtn">ล้างฟอร์ม</button>
            </div>
          </div>
        </div>
        <div class="toolbar" style="margin-top:10px">
          <button class="btn primary" id="saveTxBtn">บันทึก</button>
          <button class="btn warn hidden" id="deleteTxBtn">ลบรายการนี้</button>
        </div>
      </div>

      <div class="card" style="margin-top:14px">
        <h2>รายการของเดือนที่เลือก</h2>
        <div class="toolbar" style="margin-bottom:10px">
          <input type="month" id="monthPicker2" />
          <span class="muted">คลิกไอคอน ✏️ เพื่อแก้ไข</span>
        </div>
        <div style="max-height:540px;overflow:auto">
          <table>
            <thead>
              <tr>
                <th>วันที่</th>
                <th>ประเภท</th>
                <th>กลุ่ม</th>
                <th>จำนวนเงิน</th>
                <th>หมายเหตุ</th>
                <th>จัดการ</th>
              </tr>
            </thead>
            <tbody id="txTbody"></tbody>
          </table>
        </div>
      </div>
    </section>

    <!-- CONFIG CATEGORIES -->
    <section id="view-config" class="view hidden">
      <div class="row" style="grid-template-columns:1fr 1fr">
        <div class="card">
          <h2>กลุ่มรายรับ</h2>
          <div class="toolbar">
            <input id="newIncomeCat" placeholder="เช่น เงินเดือน" />
            <button class="btn primary" onclick="addCategory('income')">เพิ่ม</button>
          </div>
          <ul id="incomeCatList"></ul>
        </div>
        <div class="card">
          <h2>กลุ่มรายจ่าย</h2>
          <div class="toolbar">
            <input id="newExpenseCat" placeholder="เช่น อาหาร" />
            <button class="btn primary" onclick="addCategory('expense')">เพิ่ม</button>
          </div>
          <ul id="expenseCatList"></ul>
        </div>
      </div>
      <p class="footer-note" style="margin-top:10px">คุณสามารถแก้ชื่อกลุ่มได้โดยคลิกชื่อ (จะเป็นช่องแก้ไข) และกด Enter เพื่อบันทึก หรือลบด้วยปุ่ม 🗑️</p>
    </section>

    <!-- REPORTS & TAX -->
    <section id="view-reports" class="view hidden">
      <div class="card">
        <h2>สรุปรายปี & คำนวณภาษี</h2>
        <div class="toolbar" style="margin-bottom:10px">
          <label class="muted">เลือกปี</label>
          <select id="yearPicker"></select>
        </div>
        <div class="grid cols-3">
          <div class="card" style="padding:12px">
            <div class="muted">รายรับรวมต่อปี</div>
            <div id="yearIncome" style="font-size:22px;font-weight:800;color:var(--good)">—</div>
          </div>
          <div class="card" style="padding:12px">
            <div class="muted">รายจ่ายรวมต่อปี</div>
            <div id="yearExpense" style="font-size:22px;font-weight:800;color:var(--bad)">—</div>
          </div>
          <div class="card" style="padding:12px">
            <div class="muted">คงเหลือต่อปี</div>
            <div id="yearNet" style="font-size:22px;font-weight:800">—</div>
          </div>
        </div>
        <div class="grid cols-2" style="margin-top:10px">
          <div class="card" style="padding:14px">
            <h3 style="margin-top:0">ตั้งค่าลดหย่อน / ค่าใช้จ่าย</h3>
            <div class="grid cols-2">
              <div>
                <label>ส่วนตัว/คู่สมรส & อื่น ๆ (รวม) (THB)</label>
                <input type="number" id="allowanceInput" placeholder="60000" />
              </div>
              <div>
                <label>หักค่าใช้จ่ายเงินเดือน 50% (สูงสุด 100,000)</label>
                <input type="number" id="salaryExpenseDeduction" placeholder="0" />
              </div>
            </div>
            <p class="footer-note">* ป้อนตามสิทธิจริงของคุณ (เช่น ส่วนตัว 60,000, บุตร, ประกันชีวิต, กองทุน ฯลฯ รวมเป็นยอดเดียว) และค่าใช้จ่ายเงินเดือนตามเกณฑ์กฎหมาย (50% แต่ไม่เกิน 100,000 บาท สำหรับเงินได้ประเภทเงินเดือน)</p>
          </div>
          <div class="card" style="padding:14px">
            <h3 style="margin-top:0">ผลคำนวณภาษี</h3>
            <div class="grid cols-2">
              <div>
                <label>รายได้ที่ต้องเสียภาษี (หลังหักลดหย่อน/ค่าใช้จ่าย)</label>
                <input id="taxableOutput" disabled />
              </div>
              <div>
                <label>ภาษีโดยประมาณ</label>
                <input id="taxDueOutput" disabled />
              </div>
            </div>
            <button class="btn primary" style="margin-top:12px" id="calcTaxBtn">คำนวณภาษี</button>
            <p class="footer-note" style="margin-top:6px">อ้างอิงอัตราก้าวหน้า 0–35% ตามตารางกรมสรรพากรและสรุปโดย PwC / Forvis Mazars (อัปเดตปี 2025). ควรตรวจสอบสิทธิ์ลดหย่อนล่าสุดก่อนยื่นจริง</p>
          </div>
        </div>
      </div>
    </section>
  </main>

  <div class="toast" id="toast"></div>

  <script>
  /**
   * ⚙️ ตั้งค่าเชื่อมต่อ Supabase
   * 1) แทนที่ค่าด้านล่างด้วยของโปรเจกต์คุณ (Project Settings → API)
   * 2) คีย์ anon สามารถใช้ฝั่ง client ได้ โดยต้องเปิด RLS และนโยบายความปลอดภัยตามที่แนบไว้ด้านล่าง
   */
  const SUPABASE_URL = "https://gdkwiderhocrmotjoeem.supabase.co"; // TODO: แทนที่
  const SUPABASE_ANON_KEY = "keyeyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdka3dpZGVyaG9jcm1vdGpvZWVtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2NzU4NDcsImV4cCI6MjA3MTI1MTg0N30.qfrFa8_Aqw4MoJICnmQ878VL6MOHx7mJjbGVsCBAbWQ"; // TODO: แทนที่
  const { createClient } = window.supabase;
  const sb = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, { auth: { persistSession: true, autoRefreshToken: true } });

  /**
   * 🗄️ โครงสร้างตาราง (คัดลอกไปสร้างใน SQL editor ของ Supabase)
   *
   * -- หมายเหตุ: ใช้เฉพาะเมื่อยังไม่มีตารางเหล่านี้
   *
   * -- ตารางหมวดหมู่
   * create table if not exists public.categories (
   *   id uuid primary key default gen_random_uuid(),
   *   user_id uuid not null references auth.users(id) on delete cascade,
   *   type text not null check (type in ('income','expense')),
   *   name text not null,
   *   created_at timestamptz not null default now(),
   *   unique (user_id, type, name)
   * );
   *
   * -- ตารางธุรกรรม
   * create table if not exists public.transactions (
   *   id uuid primary key default gen_random_uuid(),
   *   user_id uuid not null references auth.users(id) on delete cascade,
   *   t_date date not null,
   *   type text not null check (type in ('income','expense')),
   *   category_id uuid not null references public.categories(id) on delete restrict,
   *   amount numeric(12,2) not null check (amount >= 0),
   *   note text,
   *   created_at timestamptz not null default now()
   * );
   *
   * -- เปิด RLS
   * alter table public.categories enable row level security;
   * alter table public.transactions enable row level security;
   *
   * -- นโยบาย: เจ้าของอ่าน/เขียนของตัวเองเท่านั้น
   * create policy "cat_select_own" on public.categories for select using (auth.uid() = user_id);
   * create policy "cat_ins_own"   on public.categories for insert with check (auth.uid() = user_id);
   * create policy "cat_upd_own"   on public.categories for update using (auth.uid() = user_id);
   * create policy "cat_del_own"   on public.categories for delete using (auth.uid() = user_id);
   *
   * create policy "tx_select_own" on public.transactions for select using (auth.uid() = user_id);
   * create policy "tx_ins_own"   on public.transactions for insert with check (auth.uid() = user_id);
   * create policy "tx_upd_own"   on public.transactions for update using (auth.uid() = user_id);
   * create policy "tx_del_own"   on public.transactions for delete using (auth.uid() = user_id);
   */

  // ===== Utilities =====
  const $$ = (s, root=document) => root.querySelector(s);
  const $$$ = (s, root=document) => Array.from(root.querySelectorAll(s));
  const fmtTHB = n => new Intl.NumberFormat('th-TH', { style:'currency', currency:'THB', maximumFractionDigits: 2 }).format(Number(n||0));
  const toast = (msg, type='info') => { const t = $$('#toast'); t.textContent = msg; t.style.background = type==='error'? 'var(--bad)': type==='success'? 'var(--good)': '#0f172a'; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'), 2600); };
  const todayISO = () => new Date().toISOString().slice(0,10);
  const monthKey = (d) => d.toISOString().slice(0,7);

  // ===== State =====
  let currentUser = null;
  let categories = []; // {id, type, name}
  let currentEditingId = null; // transaction id
  let pieIncome, pieExpense;

  // ===== Auth =====
  async function refreshAuth(){
    const { data: { session } } = await sb.auth.getSession();
    currentUser = session?.user || null;
    $$('#navTabs').hidden = !currentUser;
    if(currentUser){
      $$('#authView').classList.add('hidden');
      $$('#appView').classList.remove('hidden');
      await postLoginInit();
    }else{
      $$('#appView').classList.add('hidden');
      $$('#authView').classList.remove('hidden');
    }
  }

  sb.auth.onAuthStateChange((_event, _session) => { refreshAuth(); });

  async function postLoginInit(){
    // set default month pickers
    const now = new Date();
    $$('#monthPicker').value = monthKey(now);
    $$('#monthPicker2').value = monthKey(now);
    // year picker: current year to current year-5
    const ySel = $$('#yearPicker');
    ySel.innerHTML = '';
    const y = now.getFullYear();
    for(let i=y; i>=y-7; i--){ const opt = document.createElement('option'); opt.value = i; opt.textContent = i; ySel.appendChild(opt); }
    ySel.value = y;

    await ensureDefaultCategories();
    await loadCategories();
    await refreshAllViews();
  }

  async function ensureDefaultCategories(){
    // Create basic categories if user has none
    const { data: countData, error } = await sb.from('categories').select('id', { count:'exact', head:true });
    if(error){ console.warn(error); return; }
    if((countData === null) || (countData === 0)){
      const base = [
        { type:'income', name:'เงินเดือน' },
        { type:'income', name:'โบนัส' },
        { type:'income', name:'อื่น ๆ' },
        { type:'expense', name:'อาหาร' },
        { type:'expense', name:'เดินทาง' },
        { type:'expense', name:'บิล/ค่าสาธารณูปโภค' },
        { type:'expense', name:'บันเทิง' },
      ];
      const rows = base.map(b => ({ ...b, user_id: currentUser.id }));
      const { error: insErr } = await sb.from('categories').insert(rows);
      if(insErr) console.warn(insErr); else toast('สร้างกลุ่มเริ่มต้นให้แล้ว', 'success');
    }
  }

  // ===== Categories =====
  async function loadCategories(){
    const { data, error } = await sb.from('categories').select('id, type, name').order('type', { ascending: true }).order('name', { ascending: true });
    if(error){ toast('โหลดหมวดหมู่ไม่สำเร็จ','error'); return; }
    categories = data || [];
    // Fill selects
    fillCategorySelect();
    // Render lists in config
    renderCategoryLists();
  }

  function fillCategorySelect(){
    const sel = $$('#txCategory');
    sel.innerHTML = '';
    const currentType = $$('#txType').value;
    const opts = categories.filter(c=>c.type===currentType);
    for(const c of opts){ const o=document.createElement('option'); o.value=c.id; o.textContent=c.name; sel.appendChild(o); }
  }

  function renderCategoryLists(){
    const incomeUL = $$('#incomeCatList');
    const expenseUL = $$('#expenseCatList');
    incomeUL.innerHTML = expenseUL.innerHTML = '';
    const makeItem = (c) => {
      const li = document.createElement('li');
      li.style.display='flex'; li.style.alignItems='center'; li.style.justifyContent='space-between'; li.style.padding='8px 0';
      const name = document.createElement('span');
      name.textContent = c.name; name.className='chip'; name.style.cursor='text';
      name.contentEditable = true; name.onkeydown = async (e)=>{ if(e.key==='Enter'){ e.preventDefault(); name.blur(); } };
      name.onblur = async ()=>{ if(name.textContent.trim() !== c.name){ const { error } = await sb.from('categories').update({ name: name.textContent.trim() }).eq('id', c.id); if(error) toast('แก้ไขชื่อไม่สำเร็จ','error'); else { toast('อัปเดตชื่อแล้ว','success'); loadCategories(); } } };
      const del = document.createElement('button'); del.className='btn ghost'; del.textContent='🗑️'; del.onclick = async ()=>{ if(confirm('ลบกลุ่มนี้และธุรกรรมที่ผูกอยู่?')){ const { error } = await sb.from('categories').delete().eq('id', c.id); if(error) toast('ลบไม่สำเร็จ','error'); else { toast('ลบแล้ว','success'); loadCategories(); refreshAllViews(); } } };
      li.appendChild(name); li.appendChild(del); return li;
    };
    categories.filter(c=>c.type==='income').forEach(c=>incomeUL.appendChild(makeItem(c)));
    categories.filter(c=>c.type==='expense').forEach(c=>expenseUL.appendChild(makeItem(c)));
  }

  async function addCategory(type){
    const input = type==='income' ? $$('#newIncomeCat') : $$('#newExpenseCat');
    const name = input.value.trim(); if(!name) return;
    const { error } = await sb.from('categories').insert({ user_id: currentUser.id, type, name });
    if(error){ toast('เพิ่มกลุ่มไม่สำเร็จ','error'); return; }
    input.value=''; toast('เพิ่มกลุ่มแล้ว','success'); loadCategories(); fillCategorySelect();
  }

  // ===== Transactions =====
  async function saveTransaction(){
    const id = currentEditingId;
    const payload = {
      user_id: currentUser.id,
      t_date: $$('#txDate').value || todayISO(),
      type: $$('#txType').value,
      category_id: $$('#txCategory').value,
      amount: Number($$('#txAmount').value || 0),
      note: $$('#txNote').value.trim() || null,
    };
    if(!payload.category_id){ toast('กรุณาเลือกกลุ่ม','error'); return; }
    if(payload.amount<=0){ toast('จำนวนเงินต้องมากกว่า 0','error'); return; }
    if(id){
      const { error } = await sb.from('transactions').update(payload).eq('id', id);
      if(error){ toast('อัปเดตไม่สำเร็จ','error'); } else { toast('อัปเดตรายการแล้ว','success'); resetForm(); refreshAllViews(); }
    }else{
      const { error } = await sb.from('transactions').insert(payload);
      if(error){ toast('บันทึกไม่สำเร็จ','error'); } else { toast('บันทึกแล้ว','success'); resetForm(); refreshAllViews(); }
    }
  }

  async function deleteCurrentTx(){
    if(!currentEditingId) return;
    if(!confirm('ยืนยันการลบรายการนี้?')) return;
    const { error } = await sb.from('transactions').delete().eq('id', currentEditingId);
    if(error){ toast('ลบไม่สำเร็จ','error'); } else { toast('ลบแล้ว','success'); resetForm(); refreshAllViews(); }
  }

  function resetForm(){
    currentEditingId = null;
    $$('#txDate').value = todayISO();
    $$('#txType').value = 'income';
    fillCategorySelect();
    $$('#txAmount').value = '';
    $$('#txNote').value='';
    $$('#deleteTxBtn').classList.add('hidden');
  }

  async function loadMonthData(ym){
    // ym format YYYY-MM
    const start = new Date(ym + '-01T00:00:00');
    const end = new Date(start); end.setMonth(end.getMonth()+1); // first day of next month
    const startStr = start.toISOString().slice(0,10);
    const endStr = end.toISOString().slice(0,10);

    const { data, error } = await sb
      .from('transactions')
      .select('id, t_date, type, category_id, amount, note')
      .gte('t_date', startStr)
      .lt('t_date', endStr)
      .order('t_date', { ascending: false })
      .limit(500);
    if(error){ toast('โหลดข้อมูลเดือนไม่สำเร็จ','error'); return []; }
    return data || [];
  }

  async function loadYearData(year){
    const startStr = `${year}-01-01`;
    const endStr = `${year+1}-01-01`;
    const { data, error } = await sb
      .from('transactions')
      .select('id, t_date, type, category_id, amount, note')
      .gte('t_date', startStr)
      .lt('t_date', endStr)
      .order('t_date', { ascending: false })
      .limit(5000);
    if(error){ toast('โหลดข้อมูลปีไม่สำเร็จ','error'); return []; }
    return data || [];
  }

  function renderTxTable(txs, tbody){
    tbody.innerHTML = '';
    const catMap = new Map(categories.map(c=>[c.id, c]));
    for(const t of txs){
      const tr = document.createElement('tr');
      const cat = catMap.get(t.category_id);
      tr.innerHTML = `
        <td>${t.t_date}</td>
        <td>${t.type==='income'? '<span class="chip">รายรับ</span>': '<span class="chip" style="background:#fff1f2;color:#9f1239;border-color:#ffe4e6">รายจ่าย</span>'}</td>
        <td>${cat?cat.name:'—'}</td>
        <td class="${t.type==='income'?'amount pos':'amount neg'}">${fmtTHB(t.amount)}</td>
        <td>${t.note||''}</td>
        <td>
          <button class="btn ghost" title="แก้ไข">✏️</button>
        </td>`;
      tr.querySelector('button').onclick = ()=>{
        // load into form
        currentEditingId = t.id;
        $$('#txDate').value = t.t_date;
        $$('#txType').value = t.type; fillCategorySelect();
        $$('#txCategory').value = t.category_id;
        $$('#txAmount').value = t.amount;
        $$('#txNote').value = t.note||'';
        $$('#deleteTxBtn').classList.remove('hidden');
        switchTab('add');
      };
      tbody.appendChild(tr);
    }
  }

  function drawPies(txs){
    const ctxIn = $$('#pieIncome');
    const ctxEx = $$('#pieExpense');
    const catMap = new Map(categories.map(c=>[c.id, c]));

    const groupBy = (list, predicate) => list.reduce((acc, x)=>{ const k = predicate(x); acc[k]=(acc[k]||0)+Number(x.amount||0); return acc; }, {});
    const income = txs.filter(t=>t.type==='income');
    const expense = txs.filter(t=>t.type==='expense');

    const inG = groupBy(income, t=> (catMap.get(t.category_id)?.name || 'อื่น ๆ'));
    const exG = groupBy(expense, t=> (catMap.get(t.category_id)?.name || 'อื่น ๆ'));

    const inLabels = Object.keys(inG); const inData = Object.values(inG);
    const exLabels = Object.keys(exG); const exData = Object.values(exG);

    if(pieIncome) pieIncome.destroy(); if(pieExpense) pieExpense.destroy();
    pieIncome = new Chart(ctxIn, { type:'pie', data:{ labels: inLabels, datasets:[{ data: inData }] }, options:{ plugins:{ legend:{ position:'bottom' } } } });
    pieExpense = new Chart(ctxEx, { type:'pie', data:{ labels: exLabels, datasets:[{ data: exData }] }, options:{ plugins:{ legend:{ position:'bottom' } } } });

    const sumIn = inData.reduce((a,b)=>a+b,0); const sumEx = exData.reduce((a,b)=>a+b,0);
    $$('#sumIncome').textContent = fmtTHB(sumIn);
    $$('#sumExpense').textContent = fmtTHB(sumEx);
    $$('#sumNet').textContent = fmtTHB(sumIn - sumEx);
  }

  // ===== Tax Calculation (TH progressive 0–35%) =====
  function calcThaiTax(netTaxable){
    // Brackets (THB): from reliable sources (PwC/Mazars as of 2025)
    const brackets = [
      { upTo: 150000, rate: 0 },
      { upTo: 300000, rate: 0.05 },
      { upTo: 500000, rate: 0.10 },
      { upTo: 750000, rate: 0.15 },
      { upTo: 1000000, rate: 0.20 },
      { upTo: 2000000, rate: 0.25 },
      { upTo: 5000000, rate: 0.30 },
      { upTo: Infinity, rate: 0.35 },
    ];
    let remaining = Math.max(0, Math.floor(netTaxable));
    let prev = 0; let tax = 0;
    for(const b of brackets){
      const band = Math.max(0, Math.min(remaining, b.upTo - prev));
      tax += band * b.rate; prev = b.upTo; remaining -= band; if(remaining<=0) break;
    }
    return tax;
  }

  async function refreshDashboard(){
    const ym = $$('#monthPicker').value || monthKey(new Date());
    const txs = await loadMonthData(ym);
    drawPies(txs);
    renderTxTable(txs.slice(0,12), $$('#recentTbody'));
  }

  async function refreshAddList(){
    const ym = $$('#monthPicker2').value || monthKey(new Date());
    const txs = await loadMonthData(ym);
    renderTxTable(txs, $$('#txTbody'));
  }

  async function refreshReports(){
    const y = Number($$('#yearPicker').value);
    const txs = await loadYearData(y);
    const inc = txs.filter(t=>t.type==='income').reduce((a,b)=>a+Number(b.amount||0),0);
    const exp = txs.filter(t=>t.type==='expense').reduce((a,b)=>a+Number(b.amount||0),0);
    $$('#yearIncome').textContent = fmtTHB(inc);
    $$('#yearExpense').textContent = fmtTHB(exp);
    $$('#yearNet').textContent = fmtTHB(inc-exp);
  }

  async function refreshAllViews(){
    await refreshDashboard();
    await refreshAddList();
    await refreshReports();
  }

  // ===== Navigation =====
  function switchTab(id){
    $$$('.tab').forEach(b=>b.setAttribute('aria-selected', String(b.dataset.tab===id)));
    $$$('.view').forEach(v=>v.classList.add('hidden'));
    $$('#view-'+id).classList.remove('hidden');
  }

  // ===== Event bindings =====
  window.addEventListener('DOMContentLoaded', async () => {
    // default form values
    resetForm();
    $$('#txType').addEventListener('change', fillCategorySelect);

    // auth buttons
    $$('#signupBtn').onclick = async ()=>{
      const email = $$('#signupEmail').value.trim();
      const password = $$('#signupPassword').value;
      if(!email || !password) return toast('กรอกอีเมลและรหัสผ่าน');
      const { error } = await sb.auth.signUp({ email, password });
      if(error) toast(error.message, 'error'); else toast('ลงทะเบียนสำเร็จ! โปรดยืนยันอีเมล (ถ้าตั้งค่าไว้) และเข้าสู่ระบบ', 'success');
    };
    $$('#signinBtn').onclick = async ()=>{
      const email = $$('#signinEmail').value.trim();
      const password = $$('#signinPassword').value;
      const { error } = await sb.auth.signInWithPassword({ email, password });
      if(error) toast('เข้าสู่ระบบไม่สำเร็จ','error'); else toast('เข้าสู่ระบบแล้ว','success');
    };
    $$('#signOutBtn').onclick = async ()=>{ await sb.auth.signOut(); toast('ออกจากระบบแล้ว'); };

    // nav tabs
    $$$('.tab').forEach(b=> b.addEventListener('click', ()=> switchTab(b.dataset.tab)) );

    // month/year pickers
    $$('#monthPicker').addEventListener('change', refreshDashboard);
    $$('#monthPicker2').addEventListener('change', refreshAddList);
    $$('#yearPicker').addEventListener('change', refreshReports);

    // CRUD
    $$('#saveTxBtn').onclick = saveTransaction;
    $$('#deleteTxBtn').onclick = deleteCurrentTx;
    $$('#resetFormBtn').onclick = resetForm;

    // Tax button
    $$('#calcTaxBtn').onclick = async ()=>{
      const y = Number($$('#yearPicker').value);
      const txs = await loadYearData(y);
      const income = txs.filter(t=>t.type==='income').reduce((a,b)=>a+Number(b.amount||0),0);
      // Optionally exclude some expenses from tax? Here we treat expenses as reductions on income.
      const expense = txs.filter(t=>t.type==='expense').reduce((a,b)=>a+Number(b.amount||0),0);
      const allowance = Number($$('#allowanceInput').value || 0);
      const salaryDed = Math.min(100000, Math.max(0, Number($$('#salaryExpenseDeduction').value || 0)));
      const taxable = Math.max(0, income - expense - allowance - salaryDed);
      const tax = calcThaiTax(taxable);
      $$('#taxableOutput').value = fmtTHB(taxable);
      $$('#taxDueOutput').value = fmtTHB(tax);
      toast('คำนวณภาษีแล้ว','success');
    };

    await refreshAuth(); // boot
  });
  </script>
</body>
</html>
